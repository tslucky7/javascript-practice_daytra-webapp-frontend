{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;ACEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,0CAA0C;AAC1C,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;;;;;UCjJA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNsE;AAC7C;;AAEzB;AACA;AACA;AACA;AACA,IAAI,yDAAe;AACnB;AACA,IAAI,4DAAkB;AACtB,GAAG;;AAEH;AACA;AACA;AACA,IAAI,0CAAI;AACR;AACA,IAAI,4DAAkB;AACtB,GAAG;AACH,CAAC","sources":["webpack://todo/./TODO-App/css/style.css?676b","webpack://todo/./TODO-App/js/todo.js","webpack://todo/webpack/bootstrap","webpack://todo/webpack/runtime/define property getters","webpack://todo/webpack/runtime/hasOwnProperty shorthand","webpack://todo/webpack/runtime/make namespace object","webpack://todo/./TODO-App/js/script.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","\n\nexport const data = {\n  todoList: [],\n  filterWord: \"\"\n}\n\nexport const registerNewTodo = () => {\n  //入力されたTODOの値を取得\n  const newTodoName = document.getElementById(\"new-todo\");\n  const newPerson = document.getElementById(\"new-person\");\n  const newDeadline = document.getElementById(\"new-deadline\");\n  const newStatus = document.getElementById(\"new-status\");\n\n  //未入力項目がある場合はアラートを表示\n  if (\n    newTodoName.value === \"\" ||\n    newPerson.value === \"\" ||\n    newDeadline.value === \"\"\n  ) {\n    alert(\"すべての項目を入力してください\");\n    return;\n  }\n  console.log(newTodoName.value);\n\n  //TODOリストに新しいTODOを追加\n  data.todoList.push({\n    id: Date.now(),\n    todoName: newTodoName.value,\n    person: newPerson.value,\n    deadline: newDeadline.value,\n    status: newStatus,\n  });\n};\n\n//tbodyElemが登録されるたびに増殖するため、最初の要素を削除する\nconst removeTodoListElem = () => {\n  const tbodyElem = document.getElementById(\"todo-list\");\n\n  while (tbodyElem.firstChild) {\n    tbodyElem.firstChild.remove();\n  }\n};\n\n//編集ボタンがクリックされた時に該当のtodoを編集\nconst updateTodoById = (id) => {\n  const todo = data.todoList.find((todo) => todo.id === id);\n  if (todo) {\n    const newTodoName = document.createElement(\"input\");\n    const newPerson = document.createElement(\"input\");\n    const newDeadline = document.createElement(\"input\");\n    const newStatus = document.createElement(\"select\");\n\n    if (newTodoName && newPerson && newDeadline && newStatus) {\n      todo.todoName = newTodoName;\n      todo.person = newPerson;\n      todo.deadline = newDeadline;\n      todo.status = newStatus;\n    }\n  }\n};\n\n//削除ボタンがクリックされた時に該当のtodoを削除\nconst removeTodoById = (id) => {\n  data.todoList = data.todoList.filter((todo) => todo.id !== id);\n};\n\nexport const appendTodoListElem = async () => {\n  //TODOリストを全て削除\n  removeTodoListElem();\n\n  data.todoList\n    .filter(\n      (todo) =>\n        todo.todoName.includes(data.filterWord) || todo.person.includes(data.filterWord),\n    )\n    .forEach((todo) => {\n      //TodoNameのtd要素を作成\n      const todoNameTdElem = document.createElement(\"td\");\n      todoNameTdElem.textContent = todo.todoName;\n      //Personのtd要素を作成\n      const personTdElem = document.createElement(\"td\");\n      personTdElem.textContent = todo.person;\n      //Deadlineのtd要素を作成\n      const deadlineTdElem = document.createElement(\"td\");\n      deadlineTdElem.textContent = todo.deadline;\n\n      //Statusのtd要素を作成\n      const statusTdElem = document.createElement(\"td\");\n      // select要素を作成\n      const statusSelectElem = document.createElement(\"select\");\n      // 選択肢を追加\n      const todoStatusOptions = Array.from(todo.status.options);\n      console.log(todoStatusOptions);\n      const statusOptions = todoStatusOptions.map((option) => option.value);\n      statusOptions.forEach((_status) => {\n        const optionElem = document.createElement(\"option\");\n        optionElem.value = _status;\n        optionElem.textContent = _status;\n        // デフォルト値を設定\n        if (_status === todo.status) {\n          optionElem.selected = true;\n        }\n        statusSelectElem.appendChild(optionElem);\n      });\n      // ステータス変更時にTODOリストを更新\n      statusSelectElem.addEventListener(\"change\", (event) => {\n        todo.status = event.target.value; // 選択された値を更新\n      });\n\n      statusTdElem.appendChild(statusSelectElem);\n\n      //編集のbutton要素を生成\n      const updateButtonElem = document.createElement(\"button\");\n      updateButtonElem.textContent = \"編集\";\n      updateButtonElem.addEventListener(\"click\", () => {\n        updateTodoById(todo.id);\n        appendTodoListElem();\n      });\n\n      //削除のbutton要素を生成\n      const removeButtonElem = document.createElement(\"button\");\n      removeButtonElem.textContent = \"削除\";\n      removeButtonElem.addEventListener(\"click\", () => {\n        removeTodoById(todo.id);\n        appendTodoListElem();\n      });\n\n      //編集・削除ボタン表示のためのtd要素を作成\n      const ButtonTdElem = document.createElement(\"td\");\n      ButtonTdElem.appendChild(updateButtonElem);\n      ButtonTdElem.appendChild(removeButtonElem);\n\n      //tr要素を作成、td要素を追加\n      const trElem = document.createElement(\"tr\");\n      trElem.appendChild(todoNameTdElem);\n      trElem.appendChild(personTdElem);\n      trElem.appendChild(deadlineTdElem);\n      trElem.appendChild(statusTdElem);\n      trElem.appendChild(ButtonTdElem);\n\n      //tbody要素にtr要素を追加\n      const tbodyElem = document.getElementById(\"todo-list\");\n      tbodyElem.appendChild(trElem);\n    });\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { data, registerNewTodo, appendTodoListElem } from \"./todo.js\";\nimport \"../css/style.css\"\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const registerButtonElem = document.getElementById(\"register\");\n  registerButtonElem.addEventListener(\"click\", () => {\n    //入力されたTODOの値を取得して、TODOリストに新しいTODOを追加\n    registerNewTodo();\n    //TODOリストを表示\n    appendTodoListElem();\n  });\n\n  //絞り込みが入力された場合のイベント定義\n  const filterInputElem = document.getElementById(\"filter\");\n  filterInputElem.addEventListener(\"input\", () => {\n    data.filterWord = filterInputElem.value;\n    //TODOリストを表示\n    appendTodoListElem();\n  });\n});\n"],"names":[],"sourceRoot":""}